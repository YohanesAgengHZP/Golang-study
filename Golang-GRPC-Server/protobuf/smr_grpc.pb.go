// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: smr.proto

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SmrSync_SyncData_FullMethodName   = "/SmrSync/syncData"
	SmrSync_SyncAvoid_FullMethodName  = "/SmrSync/syncAvoid"
	SmrSync_SyncNumber_FullMethodName = "/SmrSync/syncNumber"
)

// SmrSyncClient is the client API for SmrSync service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SmrSyncClient interface {
	SyncData(ctx context.Context, in *DataRequest, opts ...grpc.CallOption) (*DataResponse, error)
	SyncAvoid(ctx context.Context, in *Avoid, opts ...grpc.CallOption) (*DataResponse, error)
	SyncNumber(ctx context.Context, in *DataNumber, opts ...grpc.CallOption) (*DataResponse, error)
}

type smrSyncClient struct {
	cc grpc.ClientConnInterface
}

func NewSmrSyncClient(cc grpc.ClientConnInterface) SmrSyncClient {
	return &smrSyncClient{cc}
}

func (c *smrSyncClient) SyncData(ctx context.Context, in *DataRequest, opts ...grpc.CallOption) (*DataResponse, error) {
	out := new(DataResponse)
	err := c.cc.Invoke(ctx, SmrSync_SyncData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smrSyncClient) SyncAvoid(ctx context.Context, in *Avoid, opts ...grpc.CallOption) (*DataResponse, error) {
	out := new(DataResponse)
	err := c.cc.Invoke(ctx, SmrSync_SyncAvoid_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smrSyncClient) SyncNumber(ctx context.Context, in *DataNumber, opts ...grpc.CallOption) (*DataResponse, error) {
	out := new(DataResponse)
	err := c.cc.Invoke(ctx, SmrSync_SyncNumber_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SmrSyncServer is the server API for SmrSync service.
// All implementations must embed UnimplementedSmrSyncServer
// for forward compatibility
type SmrSyncServer interface {
	SyncData(context.Context, *DataRequest) (*DataResponse, error)
	SyncAvoid(context.Context, *Avoid) (*DataResponse, error)
	SyncNumber(context.Context, *DataNumber) (*DataResponse, error)
	mustEmbedUnimplementedSmrSyncServer()
}

// UnimplementedSmrSyncServer must be embedded to have forward compatible implementations.
type UnimplementedSmrSyncServer struct {
}

func (UnimplementedSmrSyncServer) SyncData(context.Context, *DataRequest) (*DataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncData not implemented")
}
func (UnimplementedSmrSyncServer) SyncAvoid(context.Context, *Avoid) (*DataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncAvoid not implemented")
}
func (UnimplementedSmrSyncServer) SyncNumber(context.Context, *DataNumber) (*DataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncNumber not implemented")
}
func (UnimplementedSmrSyncServer) mustEmbedUnimplementedSmrSyncServer() {}

// UnsafeSmrSyncServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SmrSyncServer will
// result in compilation errors.
type UnsafeSmrSyncServer interface {
	mustEmbedUnimplementedSmrSyncServer()
}

func RegisterSmrSyncServer(s grpc.ServiceRegistrar, srv SmrSyncServer) {
	s.RegisterService(&SmrSync_ServiceDesc, srv)
}

func _SmrSync_SyncData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmrSyncServer).SyncData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmrSync_SyncData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmrSyncServer).SyncData(ctx, req.(*DataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmrSync_SyncAvoid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Avoid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmrSyncServer).SyncAvoid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmrSync_SyncAvoid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmrSyncServer).SyncAvoid(ctx, req.(*Avoid))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmrSync_SyncNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataNumber)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmrSyncServer).SyncNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmrSync_SyncNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmrSyncServer).SyncNumber(ctx, req.(*DataNumber))
	}
	return interceptor(ctx, in, info, handler)
}

// SmrSync_ServiceDesc is the grpc.ServiceDesc for SmrSync service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SmrSync_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SmrSync",
	HandlerType: (*SmrSyncServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "syncData",
			Handler:    _SmrSync_SyncData_Handler,
		},
		{
			MethodName: "syncAvoid",
			Handler:    _SmrSync_SyncAvoid_Handler,
		},
		{
			MethodName: "syncNumber",
			Handler:    _SmrSync_SyncNumber_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "smr.proto",
}
